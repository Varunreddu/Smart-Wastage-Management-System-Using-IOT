#include <WiFi.h>
#include <esp_now.h>

#define RXD2 18
#define TXD2 19

// Replace with the actual MAC of your ESP32-B
uint8_t esp32B_MAC[] = {0xD0, 0xEF, 0x76, 0x31, 0xBC, 0xA4};

void onReceive(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
  String msg = "";
  for (int i = 0; i < len; i++) msg += (char)data[i];

  Serial.print("[A1] Received from ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", info->src_addr[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.print(" -> ");
  Serial.println(msg);
}

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(1000);

  Serial.print("ESP32_A1 MAC: ");
  Serial.println(WiFi.macAddress());

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed");
    return;
  }

  esp_now_register_recv_cb(onReceive);

  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, esp32B_MAC, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (!esp_now_is_peer_exist(esp32B_MAC)) {
    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
      Serial.println("Failed to add ESP32_B as peer");
      return;
    }
  }

  Serial.println("ESP32_A1 ready.");
}

void loop() {
  if (Serial2.available()) {
    String msg = Serial2.readStringUntil('\n');
    msg.trim();
    if (msg.length() > 0) {
      esp_now_send(esp32B_MAC, (uint8_t *)msg.c_str(), msg.length());
      Serial.print("[A1] Sent to B: ");
      Serial.println(msg);
    }
  }
}
