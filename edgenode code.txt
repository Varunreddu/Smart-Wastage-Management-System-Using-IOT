#include <WiFi.h>
#include <esp_now.h>
#include <PubSubClient.h>

// Wi-Fi credentials
const char* ssid = "uday";
const char* password = "1234567890";

// Adafruit IO
const char* mqtt_server = "io.adafruit.com";
const char* aio_username = "rapole";
const char* aio_key = "give aio key here ";
const char* feed_bin1 = "rapole/feeds/bin1";
const char* feed_bin2 = "rapole/feeds/bin2";

// MAC addresses of A1 and A2
uint8_t esp32A1_MAC[] = {0xD0, 0xEF, 0x76, 0x34, 0x83, 0x20};
uint8_t esp32A2_MAC[] = {0xA0, 0xDD, 0x6C, 0x0F, 0x0D, 0x8C};

// WiFi and MQTT client
WiFiClient espClient;
PubSubClient client(espClient);

void connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Connected!");
}

void connectMQTT() {
  client.setServer(mqtt_server, 1883);
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32_B", aio_username, aio_key)) {
      Serial.println(" connected!");
    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 2 seconds");
      delay(2000);
    }
  }
}

void sendReply(uint8_t *targetMAC, const String &msg) {
  String reply = "ACK: " + msg;
  esp_now_send(targetMAC, (uint8_t *)reply.c_str(), reply.length());
}

void publishToAdafruit(const String& msg, const uint8_t* mac) {
  const char* feed = nullptr;

  if (memcmp(mac, esp32A1_MAC, 6) == 0) {
    feed = feed_bin1;
  } else if (memcmp(mac, esp32A2_MAC, 6) == 0) {
    feed = feed_bin2;
  }

  if (feed != nullptr && msg.indexOf("Bin Fill Level:") != -1) {
    client.publish(feed, msg.c_str());
    delay(2500); // Add delay to avoid throttle (2.5 sec between messages)
  }
}

void onReceive(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
  String msg = "";
  for (int i = 0; i < len; i++) msg += (char)data[i];

  // Print original serial output
  Serial.print("[B] Received from ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", info->src_addr[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.print(" -> ");
  Serial.println(msg);

  // Send acknowledgment
  if (memcmp(info->src_addr, esp32A1_MAC, 6) == 0) {
    sendReply(esp32A1_MAC, msg);
  } else if (memcmp(info->src_addr, esp32A2_MAC, 6) == 0) {
    sendReply(esp32A2_MAC, msg);
  } else {
    Serial.println("[B] Unknown sender.");
  }

  // Publish only bin fill level messages
  publishToAdafruit(msg, info->src_addr);
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  connectWiFi();
  connectMQTT();

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed");
    return;
  }

  esp_now_register_recv_cb(onReceive);

  // Add A1 peer
  esp_now_peer_info_t peerA1 = {};
  memcpy(peerA1.peer_addr, esp32A1_MAC, 6);
  peerA1.channel = 0;
  peerA1.encrypt = false;
  if (!esp_now_is_peer_exist(esp32A1_MAC)) {
    esp_now_add_peer(&peerA1);
  }

  // Add A2 peer
  esp_now_peer_info_t peerA2 = {};
  memcpy(peerA2.peer_addr, esp32A2_MAC, 6);
  peerA2.channel = 0;
  peerA2.encrypt = false;
  if (!esp_now_is_peer_exist(esp32A2_MAC)) {
    esp_now_add_peer(&peerA2);
  }

  Serial.println("ESP32_B ready.");
}

void loop() {
  if (!client.connected()) {
    connectMQTT();
  }
  client.loop();
}
